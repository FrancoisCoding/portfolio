{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport auth0 from 'auth0-js';\nimport Router from 'next/router';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-muyfhpy4.auth0.com',\n      clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n  }\n\n  handleAuthentication() {\n    return new _Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    });\n  }\n\n  setSession(authResult) {\n    // debugger;\n    // Set the time that the Access Token will expire at\n    const conversion = authResult.expiresIn * 1000;\n\n    const expiresAt = _JSON$stringify(conversion + new Date().getTime());\n\n    Cookies.set('user', authResult.idTokenPayload);\n    Cookies.set('jwt', authResult.idToken);\n    Cookies.set('expiresAt', expiresAt);\n  }\n\n  logout() {\n    // Clear Access Token and ID Token from local storage\n    Cookies.remove('user');\n    Cookies.remove('jwt');\n    Cookies.remove('expiresAt');\n    this.auth0.logout({\n      returnTo: '',\n      clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\n    });\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  async getJWKS() {\n    const res = await axios.get('https://dev-muyfhpy4.auth0.com/.well-known/jwks.json');\n    const jwks = res.data;\n    return jwks;\n  }\n\n  async verifyToken(token) {\n    if (token) {\n      const decodedToken = jwt.decode(token, {\n        complete: true\n      });\n      const jwks = await this.getJWKS();\n      const jwk = jwks.keys[0]; // BUILD CERTIFICATE\n\n      let cert = jwk.x5c[0];\n      cert = cert.match(/.{1,64}/g).join('\\n');\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}-----END CERTIFICATE-----\\n`; //\n\n      if (jwk.kid === decodedToken.header.kid) {\n        try {\n          const verifiedToken = jwt.verify(token, cert);\n          const expiresAt = verifiedToken.exp * 1000;\n          const currentTime = new Date();\n          return verifiedToken && currentTime.getTime() < expiresAt ? decodedToken : undefined;\n        } catch (err) {\n          return undefined;\n        }\n      }\n\n      const expiresAt = decodedToken.exp * 1000;\n      const currentTime = new Date();\n      return decodedToken && currentTime.getTime() < expiresAt ? decodedToken : undefined;\n    }\n\n    return undefined;\n  }\n\n  async clientAuth() {\n    const token = Cookies.getJSON('jwt');\n    const verifiedToken = this.verifyToken(token);\n    return verifiedToken;\n  }\n\n  async serverAuth(req) {\n    if (req.headers.cookie) {\n      const tokenCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith('jwt='));\n\n      if (!tokenCookie) {\n        return undefined;\n      }\n\n      const token = tokenCookie.split('=')[1];\n      const verifiedToken = await this.verifyToken(token);\n      const currentTime = new Date();\n      return verifiedToken;\n    }\n\n    return undefined;\n  }\n\n}\n\nconst auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["F:/WEBSITES/16_portfolio/services/auth0.js"],"names":["auth0","Router","Cookies","jwt","axios","Auth0","constructor","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","logout","handleAuthentication","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","console","log","conversion","expiresIn","expiresAt","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJWKS","res","get","jwks","data","verifyToken","token","decodedToken","decode","complete","jwk","keys","cert","x5c","match","join","kid","header","verifiedToken","verify","exp","currentTime","undefined","clientAuth","getJSON","serverAuth","req","headers","cookie","tokenCookie","split","find","c","trim","startsWith","auth0Client"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\r\nimport Router from 'next/router';\r\nimport Cookies from 'js-cookie';\r\nimport jwt from 'jsonwebtoken';\r\nimport axios from 'axios';\r\n\r\nclass Auth0 {\r\n    constructor() {\r\n        this.auth0 = new auth0.WebAuth({\r\n            domain: 'dev-muyfhpy4.auth0.com',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\r\n            redirectUri: 'http://localhost:3000/callback',\r\n            responseType: 'token id_token',\r\n            scope: 'openid profile'\r\n        });\r\n\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    }\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => {\r\n                if (\r\n                    authResult &&\r\n                    authResult.accessToken &&\r\n                    authResult.idToken\r\n                ) {\r\n                    this.setSession(authResult);\r\n                    resolve();\r\n                } else if (err) {\r\n                    reject(err);\r\n                    console.log(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setSession(authResult) {\r\n        // debugger;\r\n        // Set the time that the Access Token will expire at\r\n        const conversion = authResult.expiresIn * 1000;\r\n        const expiresAt = JSON.stringify(conversion + new Date().getTime());\r\n        Cookies.set('user', authResult.idTokenPayload);\r\n        Cookies.set('jwt', authResult.idToken);\r\n        Cookies.set('expiresAt', expiresAt);\r\n    }\r\n\r\n    logout() {\r\n        // Clear Access Token and ID Token from local storage\r\n        Cookies.remove('user');\r\n        Cookies.remove('jwt');\r\n        Cookies.remove('expiresAt');\r\n        this.auth0.logout({\r\n            returnTo: '',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\r\n        });\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    async getJWKS() {\r\n        const res = await axios.get(\r\n            'https://dev-muyfhpy4.auth0.com/.well-known/jwks.json'\r\n        );\r\n        const jwks = res.data;\r\n        return jwks;\r\n    }\r\n\r\n    async verifyToken(token) {\r\n        if (token) {\r\n            const decodedToken = jwt.decode(token, { complete: true });\r\n            const jwks = await this.getJWKS();\r\n            const jwk = jwks.keys[0];\r\n            // BUILD CERTIFICATE\r\n            let cert = jwk.x5c[0];\r\n            cert = cert.match(/.{1,64}/g).join('\\n');\r\n            cert = `-----BEGIN CERTIFICATE-----\\n${cert}-----END CERTIFICATE-----\\n`;\r\n            //\r\n\r\n            if (jwk.kid === decodedToken.header.kid) {\r\n                try {\r\n                    const verifiedToken = jwt.verify(token, cert);\r\n                    const expiresAt = verifiedToken.exp * 1000;\r\n                    const currentTime = new Date();\r\n                    return verifiedToken && currentTime.getTime() < expiresAt\r\n                        ? decodedToken\r\n                        : undefined;\r\n                } catch (err) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            const expiresAt = decodedToken.exp * 1000;\r\n            const currentTime = new Date();\r\n            return decodedToken && currentTime.getTime() < expiresAt\r\n                ? decodedToken\r\n                : undefined;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    async clientAuth() {\r\n        const token = Cookies.getJSON('jwt');\r\n        const verifiedToken = this.verifyToken(token);\r\n        return verifiedToken;\r\n    }\r\n\r\n    async serverAuth(req) {\r\n        if (req.headers.cookie) {\r\n            const tokenCookie = req.headers.cookie\r\n                .split(';')\r\n                .find(c => c.trim().startsWith('jwt='));\r\n            if (!tokenCookie) {\r\n                return undefined;\r\n            }\r\n            const token = tokenCookie.split('=')[1];\r\n            const verifiedToken = await this.verifyToken(token);\r\n\r\n            const currentTime = new Date();\r\n            return verifiedToken;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nconst auth0Client = new Auth0();\r\n\r\nexport default auth0Client;\r\n"]},"metadata":{},"sourceType":"module"}