{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport Router from 'next/router';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\n\nvar Auth0 =\n/*#__PURE__*/\nfunction () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-muyfhpy4.auth0.com',\n      clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n            console.log(err);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // debugger;\n      // Set the time that the Access Token will expire at\n      var conversion = authResult.expiresIn * 1000;\n\n      var expiresAt = _JSON$stringify(conversion + new Date().getTime());\n\n      Cookies.set('user', authResult.idTokenPayload);\n      Cookies.set('jwt', authResult.idToken);\n      Cookies.set('expiresAt', expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear Access Token and ID Token from local storage\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n      this.auth0.logout({\n        returnTo: '',\n        clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the Access Token's expiry time\n      var expiresAt = Cookies.getJSON('expiresAt');\n      var currentTime = new Date();\n      return currentTime.getTime() < expiresAt;\n    }\n  }, {\n    key: \"verifyToken\",\n    value: function verifyToken(token) {\n      if (token) {\n        var decodedToken = jwt.decode(token);\n        var expiresAt = decodedToken.exp * 1000;\n        var currentTime = new Date();\n        return decodedToken && currentTime.getTime() < expiresAt ? decodedToken : undefined;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"clientAuth\",\n    value: function clientAuth() {\n      return this.isAuthenticated();\n    }\n  }, {\n    key: \"serverAuth\",\n    value: function serverAuth(req) {\n      if (req.headers.cookie) {\n        var expiresAtCookie = req.headers.cookie.split(';').find(function (c) {\n          return c.trim().startsWith('expiresAt=');\n        });\n\n        if (!expiresAtCookie) {\n          return undefined;\n        }\n\n        var expiresAt = expiresAtCookie.split('=')[1];\n        var currentTime = new Date();\n        return currentTime.getTime() < expiresAt;\n      }\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["F:/WEBSITES/16_portfolio/services/auth0.js"],"names":["auth0","Router","Cookies","jwt","Auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","console","log","conversion","expiresIn","expiresAt","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJSON","currentTime","token","decodedToken","decode","exp","undefined","req","headers","cookie","expiresAtCookie","split","find","c","trim","startsWith","auth0Client"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\r\nimport Router from 'next/router';\r\nimport Cookies from 'js-cookie';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nclass Auth0 {\r\n    constructor() {\r\n        this.auth0 = new auth0.WebAuth({\r\n            domain: 'dev-muyfhpy4.auth0.com',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\r\n            redirectUri: 'http://localhost:3000/callback',\r\n            responseType: 'token id_token',\r\n            scope: 'openid profile'\r\n        });\r\n\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    }\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => {\r\n                if (\r\n                    authResult &&\r\n                    authResult.accessToken &&\r\n                    authResult.idToken\r\n                ) {\r\n                    this.setSession(authResult);\r\n                    resolve();\r\n                } else if (err) {\r\n                    reject(err);\r\n                    console.log(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setSession(authResult) {\r\n        // debugger;\r\n        // Set the time that the Access Token will expire at\r\n        const conversion = authResult.expiresIn * 1000;\r\n        const expiresAt = JSON.stringify(conversion + new Date().getTime());\r\n        Cookies.set('user', authResult.idTokenPayload);\r\n        Cookies.set('jwt', authResult.idToken);\r\n        Cookies.set('expiresAt', expiresAt);\r\n    }\r\n\r\n    logout() {\r\n        // Clear Access Token and ID Token from local storage\r\n        Cookies.remove('user');\r\n        Cookies.remove('jwt');\r\n        Cookies.remove('expiresAt');\r\n        this.auth0.logout({\r\n            returnTo: '',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\r\n        });\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the Access Token's expiry time\r\n        const expiresAt = Cookies.getJSON('expiresAt');\r\n        const currentTime = new Date();\r\n        return currentTime.getTime() < expiresAt;\r\n    }\r\n\r\n    verifyToken(token) {\r\n        if (token) {\r\n            const decodedToken = jwt.decode(token);\r\n            const expiresAt = decodedToken.exp * 1000;\r\n            const currentTime = new Date();\r\n            return decodedToken && currentTime.getTime() < expiresAt\r\n                ? decodedToken\r\n                : undefined;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    clientAuth() {\r\n        return this.isAuthenticated();\r\n    }\r\n\r\n    serverAuth(req) {\r\n        if (req.headers.cookie) {\r\n            const expiresAtCookie = req.headers.cookie\r\n                .split(';')\r\n                .find(c => c.trim().startsWith('expiresAt='));\r\n            if (!expiresAtCookie) {\r\n                return undefined;\r\n            }\r\n            const expiresAt = expiresAtCookie.split('=')[1];\r\n\r\n            const currentTime = new Date();\r\n            return currentTime.getTime() < expiresAt;\r\n        }\r\n    }\r\n}\r\n\r\nconst auth0Client = new Auth0();\r\n\r\nexport default auth0Client;\r\n"]},"metadata":{},"sourceType":"module"}