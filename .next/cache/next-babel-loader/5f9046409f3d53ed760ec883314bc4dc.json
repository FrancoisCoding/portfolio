{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport Router from 'next/router';\nimport Cookies from 'js-cookie';\n\nvar Auth0 =\n/*#__PURE__*/\nfunction () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'dev-muyfhpy4.auth0.com',\n      clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n            console.log(err);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      debugger; // Set the time that the Access Token will expire at\n\n      var expiresAt = _JSON$stringify(authResult.expiresIn * 1000 + new Date().getTime());\n\n      Cookies.set('user', authResult.idTokenPayload);\n      Cookies.set('jwt', authResult.idToken);\n      Cookies.set('expiresAt', expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear Access Token and ID Token from local storage\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n      this.auth0.logout({\n        returnTo: '',\n        clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the Access Token's expiry time\n      var expiresAt = Cookies.getJSON('expiresAt');\n      return new Date().getTime < expiresAt;\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["F:/WEBSITES/16_portfolio/services/auth0.js"],"names":["auth0","Router","Cookies","Auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","resolve","reject","parseHash","err","authResult","accessToken","idToken","setSession","console","log","expiresAt","expiresIn","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJSON","auth0Client"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAEMC,K;;;AACF,mBAAc;AAAA;;AACV,SAAKH,KAAL,GAAa,IAAIA,KAAK,CAACI,OAAV,CAAkB;AAC3BC,MAAAA,MAAM,EAAE,wBADmB;AAE3BC,MAAAA,QAAQ,EAAE,kCAFiB;AAG3BC,MAAAA,WAAW,EAAE,gCAHc;AAI3BC,MAAAA,YAAY,EAAE,gBAJa;AAK3BC,MAAAA,KAAK,EAAE;AALoB,KAAlB,CAAb;AAQA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACH;;;;2CAEsB;AAAA;;AACnB,aAAO,aAAY,UAACI,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAA,KAAI,CAAChB,KAAL,CAAWiB,SAAX,CAAqB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACtC,cACIA,UAAU,IACVA,UAAU,CAACC,WADX,IAEAD,UAAU,CAACE,OAHf,EAIE;AACE,YAAA,KAAI,CAACC,UAAL,CAAgBH,UAAhB;;AACAJ,YAAAA,OAAO;AACV,WAPD,MAOO,IAAIG,GAAJ,EAAS;AACZF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACAK,YAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACH;AACJ,SAZD;AAaH,OAdM,CAAP;AAeH;;;+BAEUC,U,EAAY;AACnB,eADmB,CAEnB;;AACA,UAAMM,SAAS,GAAG,gBACdN,UAAU,CAACO,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EADhB,CAAlB;;AAGA1B,MAAAA,OAAO,CAAC2B,GAAR,CAAY,MAAZ,EAAoBV,UAAU,CAACW,cAA/B;AACA5B,MAAAA,OAAO,CAAC2B,GAAR,CAAY,KAAZ,EAAmBV,UAAU,CAACE,OAA9B;AACAnB,MAAAA,OAAO,CAAC2B,GAAR,CAAY,WAAZ,EAAyBJ,SAAzB;AACH;;;6BAEQ;AACL;AACAvB,MAAAA,OAAO,CAAC6B,MAAR,CAAe,MAAf;AACA7B,MAAAA,OAAO,CAAC6B,MAAR,CAAe,KAAf;AACA7B,MAAAA,OAAO,CAAC6B,MAAR,CAAe,WAAf;AACA,WAAK/B,KAAL,CAAWY,MAAX,CAAkB;AACdoB,QAAAA,QAAQ,EAAE,EADI;AAEd1B,QAAAA,QAAQ,EAAE;AAFI,OAAlB;AAIH;;;4BAEO;AACJ,WAAKN,KAAL,CAAWiC,SAAX;AACH;;;sCAEiB;AACd;AACA,UAAMR,SAAS,GAAGvB,OAAO,CAACgC,OAAR,CAAgB,WAAhB,CAAlB;AACA,aAAO,IAAIP,IAAJ,GAAWC,OAAX,GAAqBH,SAA5B;AACH;;;;;;AAGL,IAAMU,WAAW,GAAG,IAAIhC,KAAJ,EAApB;AAEA,eAAegC,WAAf","sourcesContent":["import auth0 from 'auth0-js';\r\nimport Router from 'next/router';\r\nimport Cookies from 'js-cookie';\r\n\r\nclass Auth0 {\r\n    constructor() {\r\n        this.auth0 = new auth0.WebAuth({\r\n            domain: 'dev-muyfhpy4.auth0.com',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\r\n            redirectUri: 'http://localhost:3000/callback',\r\n            responseType: 'token id_token',\r\n            scope: 'openid profile'\r\n        });\r\n\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    }\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => {\r\n                if (\r\n                    authResult &&\r\n                    authResult.accessToken &&\r\n                    authResult.idToken\r\n                ) {\r\n                    this.setSession(authResult);\r\n                    resolve();\r\n                } else if (err) {\r\n                    reject(err);\r\n                    console.log(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setSession(authResult) {\r\n        debugger;\r\n        // Set the time that the Access Token will expire at\r\n        const expiresAt = JSON.stringify(\r\n            authResult.expiresIn * 1000 + new Date().getTime()\r\n        );\r\n        Cookies.set('user', authResult.idTokenPayload);\r\n        Cookies.set('jwt', authResult.idToken);\r\n        Cookies.set('expiresAt', expiresAt);\r\n    }\r\n\r\n    logout() {\r\n        // Clear Access Token and ID Token from local storage\r\n        Cookies.remove('user');\r\n        Cookies.remove('jwt');\r\n        Cookies.remove('expiresAt');\r\n        this.auth0.logout({\r\n            returnTo: '',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\r\n        });\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the Access Token's expiry time\r\n        const expiresAt = Cookies.getJSON('expiresAt');\r\n        return new Date().getTime < expiresAt;\r\n    }\r\n}\r\n\r\nconst auth0Client = new Auth0();\r\n\r\nexport default auth0Client;\r\n"]},"metadata":{},"sourceType":"module"}