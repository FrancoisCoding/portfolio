{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.c6976b4c18c31c1fe7f2.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\r\nimport Router from 'next/router';\r\nimport Cookies from 'js-cookie';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nclass Auth0 {\r\n    constructor() {\r\n        this.auth0 = new auth0.WebAuth({\r\n            domain: 'dev-muyfhpy4.auth0.com',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT',\r\n            redirectUri: 'http://localhost:3000/callback',\r\n            responseType: 'token id_token',\r\n            scope: 'openid profile'\r\n        });\r\n\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    }\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => {\r\n                if (\r\n                    authResult &&\r\n                    authResult.accessToken &&\r\n                    authResult.idToken\r\n                ) {\r\n                    this.setSession(authResult);\r\n                    resolve();\r\n                } else if (err) {\r\n                    reject(err);\r\n                    console.log(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setSession(authResult) {\r\n        // debugger;\r\n        // Set the time that the Access Token will expire at\r\n        const conversion = authResult.expiresIn * 1000;\r\n        const expiresAt = JSON.stringify(conversion + new Date().getTime());\r\n        Cookies.set('user', authResult.idTokenPayload);\r\n        Cookies.set('jwt', authResult.idToken);\r\n        Cookies.set('expiresAt', expiresAt);\r\n    }\r\n\r\n    logout() {\r\n        // Clear Access Token and ID Token from local storage\r\n        Cookies.remove('user');\r\n        Cookies.remove('jwt');\r\n        Cookies.remove('expiresAt');\r\n        this.auth0.logout({\r\n            returnTo: '',\r\n            clientID: '1gbOuVc9mDL2rfsmbsDFGOPbWH0eB2oT'\r\n        });\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the Access Token's expiry time\r\n        const expiresAt = Cookies.getJSON('expiresAt');\r\n        const currentTime = new Date();\r\n        return currentTime.getTime() < expiresAt;\r\n    }\r\n\r\n    verifyToken(token) {\r\n        if (token) {\r\n            const decodedToken = jwt.decode(token);\r\n            const expiresAt = decodedToken.exp * 1000;\r\n            const currentTime = new Date();\r\n            return decodedToken && currentTime.getTime() < expiresAt\r\n                ? decodedToken\r\n                : undefined;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    clientAuth() {\r\n        const token = Cookies.getJSON('jwt');\r\n        const verifiedToken = this.verifyToken(token);\r\n        return verifiedToken;\r\n    }\r\n\r\n    serverAuth(req) {\r\n        if (req.headers.cookie) {\r\n            const tokenCookie = req.headers.cookie\r\n                .split(';')\r\n                .find(c => c.trim().startsWith('jwt='));\r\n            if (!expiresAtCookie) {\r\n                return undefined;\r\n            }\r\n            const expiresAt = expiresAtCookie.split('=')[1];\r\n\r\n            const currentTime = new Date();\r\n            return currentTime.getTime() < expiresAt;\r\n        }\r\n    }\r\n}\r\n\r\nconst auth0Client = new Auth0();\r\n\r\nexport default auth0Client;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;;;;;;AAGA;AAEA;;;;A","sourceRoot":""}